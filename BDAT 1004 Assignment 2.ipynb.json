{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 2 Variables, Conditions and Functions "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chapter 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2: Write a program that uses input to prompt a user for their name and then welcomes them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your name:\n",
      "Group 3\n",
      "Welcome Group 3!\n"
     ]
    }
   ],
   "source": [
    "print (\"Please enter your name:\")\n",
    "name = input()\n",
    "print (\"Welcome \" + name + \"!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3: Write a program to prompt the user for hours and rate per hour to compute gross pay."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your hours:\n",
      "35\n",
      "Please enter rate per hour:\n",
      "2.75\n",
      "Your gross pay is 96.25\n"
     ]
    }
   ],
   "source": [
    "print (\"Please enter your hours:\")\n",
    "hours = float(input())\n",
    "print (\"Please enter rate per hour:\")\n",
    "rate = float(input())\n",
    "grossPay = hours * rate\n",
    "print (\"Your gross pay is \" + str(grossPay))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 4: Assume that we execute the following assignment statements:\n",
    "### width = 17\n",
    "### height = 12.0\n",
    "### For each of the following expressions, write the value of the expression and the type (of the value of the expression).\n",
    "### 1. width//2\n",
    "### 2. width/2.0\n",
    "### 3. height/3\n",
    "### 4. 1 + 2 * 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Width is 17\n",
      "Height is 12.0\n",
      "1. Calculate width//2\n",
      "Answer 8\n",
      "<class 'int'>\n",
      "2. Calculate width/2.0\n",
      "Answer 8.5\n",
      "<class 'float'>\n",
      "3. Calculate height/3\n",
      "Answer 4.0\n",
      "<class 'float'>\n",
      "4. 1+2*5\n",
      "Answer 50.5\n",
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "width = 17\n",
    "height = 12.0\n",
    "print (\"Width is \" + str(width))\n",
    "print (\"Height is \" + str(height))\n",
    "#Question 1\n",
    "print (\"1. Calculate width//2\")\n",
    "a = width // 2\n",
    "print (\"Answer \" + str(a))\n",
    "print (type(a))\n",
    "#Question 2\n",
    "print (\"2. Calculate width/2.0\")\n",
    "b = width / 2.0\n",
    "print (\"Answer \" + str(b))\n",
    "print (type(b))\n",
    "#Question 3\n",
    "print (\"3. Calculate height/3\")\n",
    "c = height / 3\n",
    "print (\"Answer \" + str(c))\n",
    "print (type(c))\n",
    "#Question 4\n",
    "print (\"4. 1+2*5\")\n",
    "d = a+b*5\n",
    "print (\"Answer \" + str(d))\n",
    "print (type(d))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5: Write a program which prompts the user for a Celsius temperature, convert the temperature to Fahrenheit, and print out the\n",
    "### converted temperature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the temperature in Celsius:\n",
      "30\n",
      "Temperature 30.0 Celcius = 86.0 Fahrenheit\n"
     ]
    }
   ],
   "source": [
    "print (\"Please enter the temperature in Celsius:\")\n",
    "celciusTemp = float(input())\n",
    "fahrenheitTemp = (celciusTemp * 9/5) + 32\n",
    "print (\"Temperature \" + str(celciusTemp) + \" Celcius = \" + str(fahrenheitTemp) + \" Fahrenheit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chapter 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 1: Rewrite your pay computation to give the employee 1.5 times the hourly rate for hours worked above 40 hours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your hours:\n",
      "45\n",
      "Please enter rate per hour:\n",
      "10\n",
      "Your gross pay is 475.0\n"
     ]
    }
   ],
   "source": [
    "print (\"Please enter your hours:\")\n",
    "hours = float(input())\n",
    "print (\"Please enter rate per hour:\")\n",
    "rate = float(input())\n",
    "if hours > 40:\n",
    "    #Calculate additional hours worked\n",
    "    additionalhours = hours - 40\n",
    "    #Calculate rate for additional hours worked\n",
    "    increaseRate = rate * 1.5\n",
    "    #Pay for the additonal hours\n",
    "    addPay = additionalhours * increaseRate\n",
    "    #Pay for the usual hours\n",
    "    usualPay = 40 * rate\n",
    "    #Total gross pay\n",
    "    incGrossPay = usualPay + addPay\n",
    "    print (\"Your gross pay is \" + str(incGrossPay))\n",
    "else:\n",
    "    grossPay = hours * rate\n",
    "    print (\"Your gross pay is \" + str(grossPay))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2: Rewrite your pay program using try and except so that your program handles non-numeric input gracefully by printing a message and exiting the program. The following shows two executions of the program:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your hours:\n",
      "forty\n",
      "Error, please enter numeric input\n"
     ]
    }
   ],
   "source": [
    "print (\"Please enter your hours:\")\n",
    "try:\n",
    "    hours = float(input())\n",
    "    print (\"Please enter rate per hour:\")\n",
    "    rate = float(input())\n",
    "    if hours > 40:\n",
    "        #Calculate additional hours worked\n",
    "        additionalhours = hours - 40\n",
    "        increaseRate = rate * 1.5\n",
    "        #Pay for the additonal hours\n",
    "        addPay = additionalhours * increaseRate\n",
    "        #Pay for the usual hours\n",
    "        usualPay = 40 * rate\n",
    "        incGrossPay = usualPay + addPay\n",
    "        print (\"Your gross pay is \" + str(incGrossPay))\n",
    "    else:\n",
    "        grossPay = hours * rate\n",
    "        print (\"Your gross pay is \" + str(grossPay))\n",
    "except:\n",
    "    print (\"Error, please enter numeric input\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3: Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a score between 0.0 and 1.0\n",
      "perfect\n",
      "Error! Bad score. Please enter a numeric value.\n"
     ]
    }
   ],
   "source": [
    "print (\"Enter a score between 0.0 and 1.0\")\n",
    "try:\n",
    "    score = float(input())\n",
    "    if score < 0.0 or score > 1.0:\n",
    "        print (\"Error! Bad score. Please enter score between 0.0 and 1.0.\")\n",
    "    elif score >= 0.9:\n",
    "        print (\"Grade is A\")\n",
    "    elif score >= 0.8:\n",
    "        print (\"Grade is B\")\n",
    "    elif score >= 0.7:\n",
    "        print (\"Grade is C\")\n",
    "    elif score >= 0.6:\n",
    "        print (\"Grade is D\")\n",
    "    elif score < 0.6:\n",
    "        print (\"Grade is F\")\n",
    "        \n",
    "except:\n",
    "    print (\"Error! Bad score. Please enter a numeric value.\")\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chapter 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5: What will the following Python program print out? (See textbook page 54)\n",
    "### def fred():\n",
    "###     print(\"Zap\")\n",
    "### def jane():\n",
    "###     print(\"ABC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ABC\n",
      "Zap\n",
      "ABC\n"
     ]
    }
   ],
   "source": [
    "def fred():\n",
    "    print(\"Zap\")\n",
    "def jane():\n",
    "    print(\"ABC\")\n",
    "jane()\n",
    "fred()\n",
    "jane()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 6: Rewrite your pay computation with time-and-a-half for over-time and create a function called computepay which takes two parameters (hours and rate)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your hours:\n",
      "45\n",
      "Please enter rate per hour:\n",
      "10\n",
      "Your gross pay is 475.0\n"
     ]
    }
   ],
   "source": [
    "def computepay ():\n",
    "    print (\"Please enter your hours:\")\n",
    "    try:\n",
    "        hours = float(input())\n",
    "        print (\"Please enter rate per hour:\")\n",
    "        rate = float(input())\n",
    "        if hours > 40:\n",
    "            #Calculate additional hours worked\n",
    "            additionalhours = hours - 40\n",
    "            increaseRate = rate * 1.5\n",
    "            #Pay for the additonal hours\n",
    "            addPay = additionalhours * increaseRate\n",
    "            #Pay for the usual hours\n",
    "            usualPay = 40 * rate\n",
    "            incGrossPay = usualPay + addPay\n",
    "            print (\"Your gross pay is \" + str(incGrossPay))\n",
    "        else:\n",
    "            grossPay = hours * rate\n",
    "            print (\"Your gross pay is \" + str(grossPay))\n",
    "    except:\n",
    "        print (\"Error, please enter numeric input\")\n",
    "computepay()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 7: Rewrite the grade program from the previous chapter using a function called computegrade that takes a score as its parameter and returns a grade as a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a score between 0.0 and 1.0\n",
      "1\n",
      "Grade is A\n"
     ]
    }
   ],
   "source": [
    "def computegrade():\n",
    "    print (\"Enter a score between 0.0 and 1.0\")\n",
    "    try:\n",
    "        score = float(input())\n",
    "        if score < 0.0 or score > 1.0:\n",
    "            print (\"Error! Bad score. Please enter score between 0.0 and 1.0.\")\n",
    "        elif score >= 0.9:\n",
    "            print (\"Grade is A\")\n",
    "        elif score >= 0.8:\n",
    "            print (\"Grade is B\")\n",
    "        elif score >= 0.7:\n",
    "            print (\"Grade is C\")\n",
    "        elif score >= 0.6:\n",
    "            print (\"Grade is D\")\n",
    "        elif score < 0.6:\n",
    "            print (\"Grade is F\")\n",
    "        \n",
    "    except:\n",
    "        print (\"Error! Bad score. Please enter a numeric value.\")\n",
    "computegrade()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
